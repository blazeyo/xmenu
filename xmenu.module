<?php
// $Id$

/**
 *  Błażej Owczarczyk
 *  blazej.owczarczyk@gmail.com
 *
 *  Name: Xmenu.
 *  Description: Lets you display big hierarchical menus the nice and user-friendly way.
 */

/**
 * Implements hook_theme().
 */
function xmenu_theme($existing, $type, $theme, $path) {
  return array(
    'xmenu' => array(
      'render element' => 'xmenu',
    ),
    'xmenu_root_item' => array(
      'render element' => 'root_item',
      'path' => drupal_get_path('module', 'xmenu'),
      'template' => 'xmenu-item',
    ),
    'xmenu_child_item' => array(
      'render element' => 'child',
    ),
  );
}

/**
 * Implements hook_form_alter(). Adds a checkbox to menu_edit_menu form.
 */
function xmenu_form_menu_edit_menu_alter(&$form, &$form_state, $form_id) {
  $settings = xmenu_get_settings();
  $form['xmenu_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable xmenu'),
      '#default_value' => $settings[$form['old_name']['#value']],
  );
  $form['#submit'][] = 'xmenu_handle_submit';
}

/**
 * Submit handler for menu_edit_menu form.
 */
function xmenu_handle_submit($form, &$form_state) {
  $settings = xmenu_get_settings();

  // Menu name has changed, so unset old setting.
  if ($form_state['values']['old_name'] != $form_state['values']['menu_name']) {
    unset($settings[$form_state['values']['old_name']]);
  }
  // Save current one.
  $settings[$form_state['values']['menu_name']] = $form_state['values']['xmenu_enable'];

  xmenu_set_settings($settings);
}

/**
 * Implements hook_block_info
 */
function xmenu_block_info() {
  $blocks = array();
  $settings = xmenu_get_settings();
  $menus = menu_get_menus();
  // Add block instance for each menu that has our checkbox checked.
  foreach ($settings as $menu_name => $enabled) {
    if ($enabled) {
      $blocks[$menu_name] = array(
        'info' => t('Xmenu: @menu-name', array('@menu-name' => $menus[$menu_name])),
        'cache' => DRUPAL_CACHE_PER_USER,
      );
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function xmenu_block_view($delta = '') {
  xmenu_attach_files();
  $menus = menu_get_menus(FALSE);
  $data['subject'] = check_plain($menus[$delta]);
  $data['content'] = xmenu_tree_output($delta);
  // Add contextual links for this block.
  if (!empty($data['content'])) {
    $data['content']['#contextual_links']['menu'] = array('admin/structure/menu/manage', array($delta));
  }
  return $data;
}

/**
 * Prepares menu tree.
 */
function xmenu_tree_output($menu_name) {
  // Get menu items with depth less than 3 (root items and their children).
  foreach (menu_build_tree($menu_name, array('max_depth' => 2)) as $key => $menu_item) {
    // Prepare new root menu item
    $item = _xmenu_extract_data_from_menu_item($menu_item);
    $item['#theme'] = 'xmenu_root_item';
    foreach ($menu_item['below'] as $subkey => $child_item) {
      /**
       * Let other modules change child items. Common use case is to set the #count property that will be displayed in round brackes.
       * This settings are available (and thus can be overridden) in hook_xmenu_root_item_alter().
       * @see theme_xmenu_child_item
       */
      $item['children'][$subkey] = _xmenu_extract_data_from_menu_item($child_item);
      $item['children'][$subkey]['#theme'] = 'xmenu_child_item';
      drupal_alter('xmenu_child_item', $item['children'][$subkey]);
    }
    // and add it to results array.
    drupal_alter('xmenu_root_item', $item);
    $xmenu[$key] = $item;
  }
  $xmenu['#theme_wrappers'] = array('xmenu');
  return $xmenu;
}

function _xmenu_extract_data_from_menu_item($menu_item) {
  return array(
    '#href' => $menu_item['link']['link_path'],
    '#title' => $menu_item['link']['link_title'],
    '#attributes' => array(),
  );
}

/**
 * Preprocess function for xmenu-root-item.tpl.php.
 */
function template_preprocess_xmenu_root_item(&$variables) {
  $element = $variables['root_item'];

  // Divide child items into 2 columns.
  $children = array();
  $counter = 0;
  if (is_array($element['children'])) {
    foreach ($element['children'] as $key => $item) {
      $children[$counter++ % 2][$key] = $item;
    }
  }
  $variables['children_first'] = $children[0];
  $variables['children_second'] = $children[1];

  // Closing element for children view.
  $variables['close'] = '<div class="xmenu-item-children-close">' . t('close') . '</div>';

  $variables['parent_link_prefix'] = $element['#parent_link_prefix'];
  $variables['parent_link_suffix'] = $element['#parent_link_suffix'];
  $variables['parent_link'] = l($element['#title'], $element['#href'], array('attributes' => $element['#attributes']));
  $variables['additional'] = $element['#additional'];
}

/**
 * Themes child menu item.
 */
function theme_xmenu_child_item($element) {
  $link = l($element['child']['#title'], $element['child']['#href']);
  // If the #count property is set put it in round brackets after the link.
  $suffix = isset($element['child']['#count']) ? ' (' . $element['child']['#count'] . ')' : '';
  return '<div class="xmenu-child-item">' . $link . $suffix . '</div>';
}

/**
 * Xmenu theme wrapper.
 */
function theme_xmenu(&$variables) {
  return '<div class="xmenu">' . $variables['xmenu']['#children'] . '</div>';
}

/**
 * Get module settings.
 */
function xmenu_get_settings() {
  return variable_get('xmenu_settings', array());
}

/**
 * Save module settings.
 */
function xmenu_set_settings($settings) {
  variable_set('xmenu_settings', $settings);
}

/**
 * Attaches other module files.
 */
function xmenu_attach_files() {
  drupal_add_css(drupal_get_path('module', 'xmenu') . '/xmenu.css');
  drupal_add_js(drupal_get_path('module', 'xmenu') . '/xmenu.js');
} 